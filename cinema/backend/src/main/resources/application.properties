
spring.application.name=backend
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DB_NAME:Cinema}
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PASSWORD:Vin_199908}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=vinothinivijayakumaran08@gmail.com
spring.mail.password=guhr xcmk kops izbp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com



spring.kafka.bootstrap-servers=pkc-12576z.us-west2.gcp.confluent.cloud:9092

# Security settings for Confluent Cloud
spring.kafka.properties.security.protocol=SASL_SSL
spring.kafka.properties.sasl.mechanism=PLAIN
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="2YUOWZUI3LM6EQ6K" password="8SMyolra8zE0Xf8FpQvv4EgPcJS/7GZdv1KE6h/tLXPoGIyffcEanaeLUM4FqY67";

# Optional: Schema Registry settings if you are using it
spring.kafka.properties.schema.registry.url=https://psrc-22y2ny.us-west2.gcp.confluent.cloud
spring.kafka.properties.basic.auth.credentials.source=USER_INFO
spring.kafka.properties.basic.auth.user.info=TERZ2X6ZEU4Q2QXL:WoLqAvKZbAQlpxzz6fLwo1LWfWWf8bN/YXonO7P6DNrFw+BdcSdOXzVW/0MQ5cBh

# Consumer specific configurations
spring.kafka.consumer.group-id=test-group

spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.properties.session.timeout.ms=60000
spring.kafka.consumer.properties.request.timeout.ms=120000
spring.kafka.producer.properties.request.timeout.ms=120000

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.LongDeserializer
# workaround for protobuf consumer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
#spring.kafka.properties.specific.protobuf.value.type=io.confluent.developer.proto.MovieProtos$Movie






